{"version":3,"sources":["Read.js","App.js","serviceWorker.js","index.js"],"names":["Read","state","data","className","this","map","item","React","Component","List","props","name","ID","number","App","IncrementItem","setState","clicks","DecreaseItem","show","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OACMA,G,kBACL,aAAe,IAAD,8BACT,+CACKC,MAAQ,CACVC,KACA,CACG,CACG,KAAO,OACP,GAAK,KACL,OAAS,cAGZ,CACG,KAAO,MACP,GAAK,KACL,OAAS,aAEZ,CACG,KAAO,UACP,GAAK,KACL,OAAS,iBAnBT,E,sEAyBT,OACG,yBAAKC,UAAY,OAEd,4BACKC,KAAKH,MAAMC,KAAKG,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,CAAMJ,KAAQI,a,GA9B1CC,IAAMC,YAoCnBC,E,iLAEA,OACE,6BACI,uCAAaL,KAAKM,MAAMR,KAAKS,MAC7B,0CAAgBP,KAAKM,MAAMR,KAAKU,IAChC,+CAAqBR,KAAKM,MAAMR,KAAKW,a,GAN9BN,IAAMC,WAYVR,ICXAc,E,YAjCb,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KAORK,cAAgB,WACd,EAAKC,SAAS,CAAEC,OAAQ,EAAKhB,MAAMgB,OAAS,KAT3B,EAYnBC,aAAe,WACb,EAAKF,SAAS,CAAEC,OAAQ,EAAKhB,MAAMgB,OAAS,KAX5C,EAAKhB,MAAQ,CACXgB,OAAQ,EACRE,MAAM,GAJS,E,sEAiBjB,OACE,6BAEE,yBAAKhB,UAAY,YACf,4BAAQA,UAAU,SAASiB,QAAShB,KAAKW,eAAzC,aACA,4BAAQZ,UAAU,SAASiB,QAAShB,KAAKc,cAAzC,aACEd,KAAKH,MAAMkB,KAAO,wBAAIhB,UAAY,OAAQC,KAAKH,MAAMgB,QAAgB,IAEzE,kBAAC,EAAD,W,GA1BUT,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b9cd090f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Read extends React.Component {\r\n constructor() {\r\n      super();\r\n      this.state = {\r\n         data:\r\n         [\r\n            {\r\n               \"name\":\"Raja\",\r\n               \"ID\":1234,\r\n               \"number\":\"9475863788\"\r\n\r\n            },\r\n            {\r\n               \"name\":\"Raj\",\r\n               \"ID\":1234,\r\n               \"number\":\"835647523\"\r\n            },\r\n            {\r\n               \"name\":\"Lakshmi\",\r\n               \"ID\":1234,\r\n               \"number\":\"84536725432\"\r\n            }\r\n         ]\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <div className = \"Wlc\">\r\n\r\n            <ul>\r\n                {this.state.data.map((item) => <List data = {item} />)}\r\n            </ul>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nclass List extends React.Component {\r\n   render() {\r\n      return (\r\n        <div>\r\n            <h1>Name :- {this.props.data.name}</h1>\r\n            <h3>Emp Id :-  {this.props.data.ID}</h3>\r\n            <h6>Phone number :- {this.props.data.number}</h6>\r\n          </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Read;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Read from './Read'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicks: 0,\n      show: true\n    };\n  }\n\n  IncrementItem = () => {\n    this.setState({ clicks: this.state.clicks + 1 });\n  }\n\n  DecreaseItem = () => {\n    this.setState({ clicks: this.state.clicks - 1 });\n  }\n\n  render() {\n    return (\n      <div>\n\n        <div className = \"main_div\">\n          <button className=\"button\" onClick={this.IncrementItem}>Increment</button>\n          <button className=\"button\" onClick={this.DecreaseItem}>Decrement</button>\n          { this.state.show ? <h2 className = \"num\">{ this.state.clicks }</h2> : '' }\n        </div>\n        <Read/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}